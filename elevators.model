type PersonId: 1..5;
type ElevatorId: 1..3;
type Floor: 1..6;

type Person: either {
    Sleeping {
        floor: Floor,
    },
    Waiting {
        floor: Floor,
        destination: Floor,
        //assert(floor != destination);
    },
    Riding {
        elevator: ElevatorId,
        destination: Floor,
    },
}
var people: Array<Person>[PersonId];

type FloorControl: record {
    downActive: Boolean,
    upActive: Boolean,
}
var floorControls: Array<FloorControl>[Floor];


type Elevator: record {
//    destinations: Set<Floor>,
//    riders: Set<PersonId>,
    direction: either {
        Up,
        Down,
    },
    location: either {
        AtFloor {
            at: Floor,
            doors: either {
                Closed,
                Opening,
                Open,
                Closing,
            },
        },
        Between {
            next: Floor,
            // doors are closed for safety purposes
        },
    },
}
var elevators: Array<Elevator>[ElevatorId];

rule move for elevator in elevators {
    match elevator.location {
        Between as b => {
            elevator.location = AtFloor { at: b.next, doors: Closed };
        },
        AtFloor as f => {
            if f.doors == Closed {
                match elevator.direction {
                    Up => {
                        if f.at < 6 {
                          elevator.location = Between { next: f.at + 1 };
                        }
                    },
                    Down => {
                        if f.at > 1 {
                          elevator.location = Between { next: f.at - 1 };
                        }
                    },
                    Neutral => { /* do nothing: not moving */ },
                }
            }
        },
    }
}

rule changeDirection for elevator in elevators {
    match elevator.location {
        AtFloor as f => {
            match elevator.direction {
                Up => {
                    if f.at > 1 {
                        elevator.direction = Down;
                    }
                },
                Down => {
                    if f.at < 6 {
                        elevator.direction = Up;
                    }
                },
            }
        },
        Between as b => { /* no turning here */ },
    }
}
