type PersonId: 1..5;
type ElevatorId: 1..6;
type Floor: 1..9;
type FloorCalls: 1..18; // num floors * 2

type Person: either {
  Sleeping {
    floor: Floor,
    wakeAt: Time,
  },
  Waiting {
    floor: Floor,
    destination: Floor,
    tripStart: Time,
  },
  Riding {
    elevator: ElevatorId,
    destination: Floor,
    tripStart: Time,
    rideStart: Time,
  },
}
var people: Array<Person>[PersonId];
for person in people {
  person = Sleeping {
    floor: urandom<Floor>(),
    wakeAt: later(urandomRange(0, 30000)),
  };
}

type Trip: record {
  person: PersonId,
  elevator: ElevatorId,
  start: Time,
  board: Time,
  end: Time,
};
var trips: Output<Trip>;

type FloorControl: record {
  downActive: Boolean,
  upActive: Boolean,
}
var floorControls: Array<FloorControl>[Floor];

type Doors : either {
  Closed,
  Opening {
    startAt: Time,
    doneAt: Time,
  },
  Open { closeAt: Time },
  Closing {
    startAt: Time,
    doneAt: Time,
  },
}

type Direction : either {
  Up,
  Down,
}

type FloorCall : record {
  floor: Floor,
  direction: Direction,
}

type Elevator: record {
  floorCalls: Set<FloorCall>[FloorCalls],
  riders: Set<PersonId>[PersonId],
  direction: Direction,
  location: either {
    AtFloor {
      at: Floor,
      doors: Doors,
    },
    Between {
      next: Floor,
      leftAt: Time,
      nextAt: Time,
      // doors are closed for safety purposes
    },
  },
}
var elevators: Array<Elevator>[ElevatorId];

distribution makeDestination(start: Floor) -> Floor {
  while (True) {
    var f : Floor = urandom<Floor>();
    if f != start {
      return f;
    }
  }
}

function doorsOpen(doors: Doors) -> Boolean {
  match doors {
    Open { return True; }
    default { return False; }
  }
}

function callActive(floor: Floor, direction: Direction) -> Boolean {
  match direction {
    Up   { return floorControls[floor].upActive;   }
    Down { return floorControls[floor].downActive; }
  }
}

// In the current direction the elevator is traveling, should it open its doors
// at the given floor?
function isDestination(floor: Floor, elevator: Elevator) -> Boolean {
  // person riding
  for pid in elevator.riders {
    match people[pid] {
      Riding(r) {
        if r.destination == floor {
          return True;
        }
      }
      default { assert False; }
    }
  }
  // floor call
  for call in elevator.floorCalls {
    if (call.floor == floor &&
        call.direction == elevator.direction) {
      return True;
    }
  }
  return False;
}

// One person decides they want to move floors (Sleeping to Waiting).
// They haven't yet pressed the up/down button.
rule wake for person in people {
  match person {
    Sleeping(s) {
      if past(s.wakeAt) {
        var dest : Floor = makeDestination(s.floor);
        assert dest != s.floor;
        person = Waiting {
          floor: s.floor,
          destination: dest,
          tripStart: later(0),
        };
        if dest > s.floor {
          if !floorControls[s.floor].upActive {
            floorControls[s.floor].upActive = True;
            dispatchElevator(s.floor, Up);
          }
        } else {
          if !floorControls[s.floor].downActive {
            floorControls[s.floor].downActive = True;
            dispatchElevator(s.floor, Down);
          }
        }
      }
    }
    default { /* do nothing */ }
  }
}

// Elevator moves up or down
rule move for elevator in elevators {
  match elevator.location {
    Between(b) {
      if past(b.nextAt) {
        elevator.location = AtFloor { at: b.next, doors: Closed };
      }
    } // end Between
    AtFloor(f) {
      if (f.doors == Closed &&
          !isDestination(f.at, elevator)) {
        // where to go in this direction
        var moveTo : Floor = f.at;
        // set to the other direction if there's anything worth going to in the
        // other direction
        var moveDir : Direction = elevator.direction;
        match elevator.direction {
          Up {
            for pid in elevator.riders {
              match people[pid] {
                Riding(r) {
                  if r.destination > f.at {
                    moveTo = f.at + 1;
                  }
                  if r.destination < f.at {
                    moveDir = Down;
                  }
                }
                default { assert False; }
              }
            }
            for call in elevator.floorCalls {
              if call.floor > f.at {
                moveTo = f.at + 1;
              }
              if call.floor < f.at ||
                 (call.floor == f.at && call.direction == Down) {
                moveDir = Down;
              }
            }
          }
          Down {
            for pid in elevator.riders {
              match people[pid] {
                Riding(r) {
                  if r.destination < f.at {
                    moveTo = f.at - 1;
                  }
                  if r.destination > f.at {
                    moveDir = Up;
                  }
                }
                default { assert False; }
              }
            }
            for call in elevator.floorCalls {
              if call.floor < f.at {
                moveTo = f.at - 1;
              }
              if call.floor > f.at ||
                 (call.floor == f.at && call.direction == Up) {
                moveDir = Up;
              }
            }
          }
        } // end match direction
        if moveTo == f.at {
          // No reason to move in this direction.
          // Might need to change direction.
          if moveDir != elevator.direction {
            elevator.direction = moveDir;
          }
        } else { // move in same direction
          elevator.location = Between {
            next: moveTo,
            leftAt: later(0),
            nextAt: later(4000),
          };
        } // end if moving
      } // end Closed
    } // end AtFloor
  } // end match location
} // end rule move

/*
// Elevator goes from up to down or down to up.
rule changeDirection for elevator in elevators {
  match elevator.location {
    AtFloor(f) {
      if f.doors == Closed && !isDestination(f.at, elevator) {
        var smaller : Boolean = False;
        var larger : Boolean = False;
        for floor in elevator.destinations {
          if floor < f.at {
            smaller = True;
          }
          if floor > f.at {
            larger = True;
          }
        }
        for floor, control in floorControls {
          if control.downActive {
            if floor < f.at {
              smaller = True;
            }

          }
        }
        match elevator.direction {
          Up => {
            if f.at > 1 && smaller && !larger {
              elevator.direction = Down;
            }
          },
          Down => {
            if f.at < 6 && larger && !smaller {
              elevator.direction = Up;
            }
          },
        }
      }
    }
    Between(b) { /* no turning here * /}
  }
}
*/

function dispatchElevator(floor: Floor, direction: Direction) {
  // measured in half-floors, should be >= (size(floorControls) - 1) * 3 * 2
  type Distance: 0..600;
  var distance: Array<Distance>[ElevatorId];
  // calculate distances
  for eid, elevator in elevators {
    var at : Floor;
    match elevator.location {
      AtFloor(a) {
        at = a.at;
      }
      Between(b) {
        distance[eid] += 1;
        at = b.next;
      }
    }
    match elevator.direction {
      Up {
        if at <= floor && direction == Up {
          distance[eid] += 2 * (floor - at);
        } else {
          // worst case:
          distance[eid] += 2 * ((size(floorControls) - at) + /* up to top */
                                (size(floorControls) - 1) + /* down to bottom */
                                (size(floorControls) - floor)); /* up to floor */
        }
      }
      Down {
        if at >= floor && direction == Down {
          distance[eid] += 2 * (at - floor);
        } else {
          // worst case:
          distance[eid] += 2 * ((at - 1) + /* down to bottom */
                                (size(floorControls) - 1) + /* up to top */
                                (floor - 1)); /* down to floor */
        }
      }
    }
  }

  // find closest elevators
  var minDist : Distance = distance[1];
  for eid, elevator in elevators {
    if distance[eid] < minDist {
      minDist = distance[eid];
    }
  }
  var closest : Set<ElevatorId>[ElevatorId];
  for eid, elevator in elevators {
    if minDist == distance[eid] {
      push(closest, eid);
    }
  }
  // dispatch random closest elevator
  var closestId : ElevatorId = closest[urandomRange(1, size(closest))];
  push(elevators[closestId].floorCalls, FloorCall {
    floor: floor,
    direction: direction,
  });
}

// Elevator clears a floor button.
rule clearControl for eid, elevator in elevators {
  match elevator.location {
    AtFloor(f) {
      if doorsOpen(f.doors) {
        match elevator.direction {
          Up => { floorControls[f.at].upActive = False; },
          Down => { floorControls[f.at].downActive = False; },
        } // direction
      }
    }
    Between {}
  } // location
}

// Elevator opens or closes its doors.
rule moveDoors for eid, elevator in elevators {
  match elevator.location {
    AtFloor(f) {
      match f.doors {
        Opening(o) {
          if past(o.doneAt) {
            f.doors = Open {
              closeAt: later(4000),
            };
          }
        }
        Open(o) {
          if past(o.closeAt) {
            f.doors = Closing {
              startAt: later(0),
              doneAt: later(4000),
            };
          }
        }
        Closing(c) {
          if past(c.doneAt) {
            f.doors = Closed;
          }
        }
        Closed {
          if (isDestination(f.at, elevator)) {
            f.doors = Opening {
              startAt: later(0),
              doneAt: later(4000),
            };
            remove(elevator.floorCalls, FloorCall {
              floor: f.at,
              direction: elevator.direction,
            });
          }
        }
      }
      elevator.location = f;
    }
    Between => {},
  }
}

// Person gets on or off an elevator.
rule boardOrLeave for pid, person in people {
  match person {
    Sleeping { /* do nothing */ }
    Waiting(w) {
      for eid, elevator in elevators {
        match elevator.location {
          AtFloor(a) {
            var dirOk : Boolean;
            match elevator.direction {
              Up   { dirOk = w.destination > w.floor; }
              Down { dirOk = w.destination < w.floor; }
            }
            if a.at == w.floor && doorsOpen(a.doors) && dirOk {
              person = Riding {
                elevator: eid,
                destination: w.destination,
                tripStart: w.tripStart,
                rideStart: later(0),
              };
              push(elevator.riders, pid);
              break;
            }
          }
          Between { /* do nothing */ }
        }
      }
    }
    Riding as r => {
      match elevators[r.elevator].location {
        AtFloor(a) {
          if a.at == r.destination && doorsOpen(a.doors) {
            push(trips, Trip {
              person: pid,
              elevator: r.elevator,
              start: r.tripStart,
              board: r.rideStart,
              end: later(0),
            });
            person = Sleeping {
              floor: r.destination,
              wakeAt: later(urandomRange(5000, 30000)),
            };
            remove(elevators[r.elevator].riders, pid);
          }
        }
        Between { /* do nothing */ }
      }
    }
  }
}

invariant goSomewhereElse {
  for person in people {
    match person {
      Waiting(w) {
        assert w.floor != w.destination;
      }
      default {}
    }
  }
}

invariant elevatorRidersCorrect {
  for pid, person in people {
    match person {
      Sleeping {
        for elevator in elevators {
          assert !contains(elevator.riders, pid);
        }
      }
      Waiting {
        for elevator in elevators {
          assert !contains(elevator.riders, pid);
        }
      }
      Riding(r) {
        for eid, elevator in elevators {
          if r.elevator == eid {
            assert contains(elevator.riders, pid);
          } else {
            assert !contains(elevator.riders, pid);
          }
        }
      }
    }
  }
}
